//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/ActorInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActorInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActorInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActorInputAction"",
    ""maps"": [
        {
            ""name"": ""KeyboardInput"",
            ""id"": ""89b5571d-1585-44e9-a0f2-00bf52399e53"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""775e54c4-bf81-4761-ad05-c55c3cd5b4b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""21e08348-f56b-458b-bd14-ffd5ad56793b"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f43d22cb-c3ab-4956-a63e-d1305fb32ba8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3fd49acb-34e8-478e-a0eb-fd3b82202848"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b3ada51d-b6a1-4aad-a5a9-47e334395c8f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""045bc7c3-f554-4fc6-8041-94f8b25d448d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyboardInput
        m_KeyboardInput = asset.FindActionMap("KeyboardInput", throwIfNotFound: true);
        m_KeyboardInput_Move = m_KeyboardInput.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardInput
    private readonly InputActionMap m_KeyboardInput;
    private List<IKeyboardInputActions> m_KeyboardInputActionsCallbackInterfaces = new List<IKeyboardInputActions>();
    private readonly InputAction m_KeyboardInput_Move;
    public struct KeyboardInputActions
    {
        private @ActorInputAction m_Wrapper;
        public KeyboardInputActions(@ActorInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_KeyboardInput_Move;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardInputActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardInputActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IKeyboardInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IKeyboardInputActions instance)
        {
            if (m_Wrapper.m_KeyboardInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardInputActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardInputActions @KeyboardInput => new KeyboardInputActions(this);
    public interface IKeyboardInputActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
